--------------------------##swift##------------------------
1. agt-get install swift github 上的软件包列表, 执行二进制程序不需要全部这些,但作为开发环境想要自己编译swift就要都装上.
2. apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* 处理临时文件减少镜像的尺寸
3. Dockerfile 的 ARG命令相当于宏, ENV相当于环境变量. 可用 ARG 给 ENV 赋值.
4. https://swift.org/builds/swift-4.1.2-release/ubuntu1604/swift-4.1.2-RELEASE/swift-4.1.2-RELEASE-ubuntu16.04.tar.gz  代码分支/操作系统平台/目标版本/信息拼接的二进制程序包文件
5. curl -fSsl 使curl支持重定向并不向控制台输出内容 -S在出错的时候提示
6. GNUPGHOME  下载文件之后先不要减压缩文件,要判断内容是否合法 GNUPGHOME 用于保存验证签名过程中使用的临时文件,set -e表示接下来的shell命令如果出错，直接中断执行.执行gpg得到用于验证的key，再用我们刚才下载的.sig文件去验证对应的二进制程序文件--swift.tar.gz(5E4DF843FB065D7F7E24FBA2EF5430F071E1B235是Swift 4.1发行版本使用的Key)
--strip-components=1 去掉顶层目录
7. 应该尽可能把命令写在同一个RUN里,减少镜像尺寸
8. docker build -t paprikaLang/swift:0.1.0 .
9. error: failed to launch REPL process: process launch failed: 'A' packet returned an error: 8
REPL需要一个额外的权限，需要传递--privileged参数启动
docker run --privileged -it paprikaLang/swift:0.1.0 swift

-----------------------##vapor##----------------------------
1.docker build -f ./DockerFile_Vapor -t paprikaLang/vapor:0.1.0 .  #-f 指定构建镜像的脚本名称

2.docker run --name=vapor-dev -v $PWD/HelloVapor:/var/www/HelloVapor -p 8087:8080 -it -w /var/www/HelloVapor paprikalang/vapor:0.1.0 bash

--name=vapor-dev: 设置Vapor容器的名称，稍后，Nginx要通过这个名字，找到Vapor容器
-w: 把容器内Shell的working directory设置成了/var/www/HelloVapor

3.进入/var/www/HelloVapor, vapor build 下载依赖库
vapor run --hostname=0.0.0.0 --port=8080
--hostname=0.0.0.0: 没有则无法在容易外访问到vapor

4.如何让Nginx和上面这个vapor产生连接:
docker run --link=vapor-dev:vapor -p 80:80 -it --rm paprikalang/nginx:0.1.3
--link=vapor-dev:vapor: vapor-dev是容器名称,vapor是vapor run --port=8080 proxy_pass http://vapor:8080;

5.如果vapor-dev暂停,重启用:docker start c42186b40740
docker exec -it c42186b40740 /bin/bash 
vapor run --hostname=0.0.0.0 --port=8080
这样就可以重新link


----------------network---------------
network 代替 --link=vapor-dev:vapor:

docker network create --driver=bridge paprikalang-net


docker run --name=vapor \
-v $PWD/HelloVapor:/var/www/HelloVapor \
--network=paprikalang-net \
-p 8087:8080 \
-it \
-w /var/www/HelloVapor \
paprikalang/vapor:0.1.0 \
bash


docker run \
--network=paprikalang-net \
-p 80:80 \
-it \
--rm paprikalang/nginx:0.1.3



-------------data-container------------
创建data-container容器, 提取变量volume
docker run --rm -it \
-v $PWD/HelloVapor:/var/www/HelloVapor \
--network=paprikalang-net \
--name dvc \
busybox

docker run --name=vapor \
--volumes-from dvc \
--network=paprikalang-net  \
-p 8085:8080 \
-it \
-w /var/www/HelloVapor \
paprikalang/vapor:0.1.0 \
bash


nginx default:
root /var/www/HelloVapor;

docker build -t paprikaLang/nginx:0.1.4 .

docker run --network=paprikalang-net \
--volumes-from dvc \
-p 80:80 -it --rm \
paprikalang/nginx:0.1.4

访问: http://127.0.0.1/hello.html























